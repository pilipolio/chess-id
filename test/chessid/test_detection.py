import numpy as np
import unittest
from pathlib import Path

from chessid import detection


class Test(unittest.TestCase):

    def test_on_real_board(self):

        with Path(__file__).with_name('small_working.jpeg').open('rb') as f:
            image = np.asarray(bytearray(f.read()))

        debug_image, board_image, squares_images = detection.find_board(image)
        self.assertEqual(len(squares_images), 64)

    def test_find_corners(self):

        points = [(257.0, 373.68555), (882.1362, 373.68643), (669.6237, 373.6859), (43.636665, 373.68588), (775.63983, 373.68613), (363.0, 373.68558), (150.0, 373.68558), (469.0, 373.68558), (257.0, 687.0), (888.9732, 687.00006), (675.09265, 687.0), (41.292847, 687.0), (781.10876, 687.00006), (363.0, 687.0), (150.0, 687.0), (469.0, 687.0), (257.0, 480.0), (884.4562, 480.00003), (671.47943, 480.00003), (42.841362, 480.0), (777.4956, 480.00003), (363.0, 480.00003), (150.0, 480.0), (469.0, 480.00003), (257.0, 308.0), (880.7029, 308.00003), (668.4772, 308.00003), (44.12805, 308.0), (774.4933, 308.00003), (363.0, 308.00003), (150.0, 308.0), (469.0, 308.00003), (257.0, 583.0), (886.7038, 583.00006), (673.27734, 583.0), (42.070843, 583.0), (779.29346, 583.00006), (363.0, 583.0), (150.0, 583.0), (469.0, 583.0), (257.0, 791.81775), (891.1397, 786.28424), (676.8583, 788.15393), (40.4946, 793.70734), (782.85834, 787.22894), (363.0, 790.8926), (150.0, 792.7516), (469.0, 789.9674), (257.0, 1223.9801), (900.4863, 1214.6206), (684.35724, 1217.7639), (37.251446, 1227.1775), (790.3464, 1216.2223), (363.0, 1222.4381), (150.0, 1225.5369), (469.0, 1220.8961), (257.0, 1001.0), (895.8252, 1001.00006), (680.57355, 1001.0), (38.943897, 1001.0), (786.5897, 1001.00006), (363.0, 1001.0), (150.0, 1001.0), (469.0, 1001.0), (257.0, 1110.6838), (897.9741, 1099.4956), (682.3585, 1103.2593), (38.09438, 1114.5049), (788.34235, 1101.4093), (363.0, 1108.8336), (150.0, 1112.5515), (469.0, 1106.9834)]

        expected_corners = [[43.636665, 373.68588], [37.251446, 1227.1775], [900.4863, 1214.6206], [882.1362, 373.68643]]
        corners = detection.find_corners(points, img_dim=(1840, 3264))

        np.testing.assert_array_almost_equal(expected_corners, corners)
        print(corners)

        corners = detection.find_corners2(points)

        print(corners)
